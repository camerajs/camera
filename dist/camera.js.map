{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/camera.ts","src/events/load.ts","src/lib/browser.ts","src/lib/setCamera.ts","src/lib/utils.ts","src/preferences.ts"],"names":[],"mappings":"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","file":"camera.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {loadEvent} from \"./events/load\";\nimport {preferences} from \"./preferences\";\nimport {utils} from \"./lib/utils\";\nimport {browser} from \"./lib/browser\";\nimport {setCamera} from \"./lib/setCamera\";\nimport {upload} from \"./lib/upload\";\nclass cameraInitializer {\n    constructor() {\n        cameraInitializer.ready();\n    }\n\n    static async ready() {\n        let loadEventInstance = new loadEvent();\n        //https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#downlevel-async-functions\n\n        await loadEventInstance.eventListener();\n\n        if (!preferences.isHttps) {\n            utils.log(\"HTTPS required\", \"warn\");\n        }\n\n        if (setCamera.listCameraAndMicrophones() == undefined) {\n            utils.log(\"No camera input found on this device.\", 'warn');\n        }\n\n        if (!browser.checkBrowserSupport()) {\n            utils.log(\"Your browser does not support camera\", \"warn\");\n        }\n\n        if (browser.checkBrowserSupport() && setCamera.listCameraAndMicrophones()) {\n            /*If user browser is supporting camera and already has at least one active camera, then we are safe to call\n             setCamera()\n             */\n            new setCamera()\n        }\n\n    }\n}\n\nnew cameraInitializer();\n","import {eventInterface} from \"./interface\";\nimport {utils} from \"../lib/utils\";\nimport {browser} from \"../lib/browser\";\nimport {preferences} from \"../preferences\";\n\nexport class loadEvent implements eventInterface {\n\n    eventListener() {\n        /**\n         * This method will be called inside the this.eventCallback method using a async function which means\n         *   the method (this.eventCallback) will wait for the answer from evenListener (current method).\n         */\n        return new Promise<void>(resolve => {\n            window.addEventListener(\"load\", () => {\n                /**\n                 * resolve() will return to result to the async function in its call stack, and will let the function\n                 *   continue\n                 */\n                this.eventCallback();\n                resolve();\n            });\n        });\n    }\n\n    eventCallback() {\n        preferences.isHttps = utils.isHttps();\n        preferences.isMobile = browser.checkMobile(); //If true, means the user browser is a mobile browser\n    }\n\n}\n\n\n\n\n","import {preferences} from \"../preferences\";\nexport class browser {\n\n    static checkBrowserSupport() {\n        /**\n         * This method will check if the user browser is supporting HTML5 camera API or not\n         * The result of the !!(navigator.getUserMedia...) will be true or false\n         * Learn more: https://www.html5rocks.com/en/tutorials/getusermedia/intro/\n         * Learn more: https://hacks.mozilla.org/2013/02/cross-browser-camera-capture-with-getusermediawebrtc/\n         * Solution for old navigator object properties: http://stackoverflow.com/a/13642033/3176270\n         **/\n        let nav = <any>navigator;\n        preferences.browserCameraSupport = !!(nav.getUserMedia || nav.webkitGetUserMedia ||\n        nav.mozGetUserMedia || nav.msGetUserMedia);\n        return preferences.browserCameraSupport;\n    }\n\n    static checkMobile(): boolean {\n        //Return true if the user browser is a mobile browser:\n        let check = false;\n        (function (a) {\n            if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true;\n        })(navigator.userAgent || navigator.vendor);\n        return check;\n    }\n}\n","import {utils} from \"./utils\";\nexport class setCamera {\n    constructor() {\n        let cameraTags: NodeList = setCamera.getCameraTags(); //List of founded camera tag elements\n\n        if (cameraTags.length) {\n            //if any camera tag found:\n            this.createCameraView(cameraTags);\n        }\n    }\n\n    private static getCameraTags() {\n        /**\n         * getCameraTags() returns list of camera tags found on the HTML page.\n         * This should be a method, because we will have more things to check for a camera-tag,\n         * like some settings & configurations from the camera tag attributes\n         **/\n        return <NodeList>document.querySelectorAll('[data-camera]');\n    }\n\n    protected createCameraView(cameraTags: any) {\n        //Check the number of user camera/audio inputs which are installed into user device (if 0 or undefined , it means no camera found):\n        setCamera.listCameraAndMicrophones();\n\n\n        /*loop through founded camera tags, and insert video tag, canvas and menu into them\n         (video tag will let us stream camera output, canvas will capture the picture)*/\n        for (let i = 0; i < cameraTags.length; i++) {\n            let currentCameraTag: HTMLElement = cameraTags[i];\n            currentCameraTag.className = 'camerajs-element';\n            currentCameraTag.appendChild(setCamera._createVideoElement(i));\n            currentCameraTag.appendChild(setCamera._createCanvasElement(i));\n            currentCameraTag.appendChild(setCamera._createCameraMenu());\n\n            //Stream the camera output by the video tag:\n            let videoElement: HTMLVideoElement = <HTMLVideoElement>document.getElementById('camerajs-' + i);\n            navigator.mediaDevices.getUserMedia({video: true}).then(function (stream) {\n                videoElement.src = window.URL.createObjectURL(stream);\n                videoElement.play();\n            });\n\n            //Initialize the canvas to put the captured photo into it:\n            let canvasElement: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById('camerajs-canvas-' + i);\n            let canvasContext: any = canvasElement.getContext('2d');\n\n            //Mirroring the canvas\n            canvasContext.translate(640, 0);\n            canvasContext.scale(-1, 1);\n\n            //Capture photo:\n            currentCameraTag.querySelector(\".camerajs-menu>a\").addEventListener(\"click\", function () {\n                canvasContext.drawImage(videoElement, 0, 0, 640, 480); //Draw the captured photo on canvas\n            });\n        }\n    }\n\n    private static _createVideoElement(elementIndex: number) {\n        /*\n         * Inside the createCameraView method, we will need to make something that user can see the output of the camera\n         *  we need to put a video, canvas tag, and camera main menu (the capture and change camera from rear to front\n         *  will be inside menu, also filter and effects) - This method is just for video element and will let user to see\n         *  camera output\n         * */\n        let videoTag: HTMLVideoElement = document.createElement(\"video\");\n        videoTag.id = \"camerajs-\" + elementIndex;\n        videoTag.setAttribute('width', '640');\n        videoTag.setAttribute('height', '480');\n        videoTag.setAttribute(\"autoplay\", \"true\");\n        return videoTag;\n    }\n\n    private static _createCanvasElement(elementIndex: number) {\n        /*\n         * Inside the createCameraView method, we will need to make something that user can see the output of the camera\n         *  we need to put a video, canvas tag, and camera main menu (the capture and change camera from rear to front\n         *  will be inside menu, also filter and effects) - Canvas element will be used when we capture a picture\n         * */\n        let canvasTag: HTMLCanvasElement = document.createElement(\"canvas\");\n        canvasTag.id = \"camerajs-canvas-\" + elementIndex;\n        canvasTag.setAttribute('width', '640');\n        canvasTag.setAttribute('height', '480');\n        return canvasTag;\n    }\n\n    private static _createCameraMenu() {\n        /*\n         * Inside the createCameraView method, we will need to make something that user can see the output of the camera\n         *  we need to put a video, canvas tag, and camera main menu (the capture and change camera from rear to front\n         *  will be inside menu, also filter and effects) - The menu of the camera (capture, change camera, etc buttons)\n         * */\n        //<div class=\"camerajs-menu\"><a>' + svgIconCapture + '</a></div>';\n        let menuDivTag: HTMLDivElement = document.createElement(\"div\");\n        menuDivTag.className = \"camerajs-menu\";\n\n        //create the capture button (the svgIconCapture is a capture icon):\n        let svgIconCapture: any = '<?xml version=\"1.0\" ?><svg style=\"enable-background:new 0 0 24 24;\" version=\"1.1\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g id=\"info\"/><g id=\"icons\"><path d=\"M19,7h-0.4c-0.4,0-0.7-0.2-0.9-0.6l-1.2-2.3c-0.3-0.7-1-1.1-1.8-1.1H9.2C8.5,3,7.8,3.4,7.4,4.1L6.3,6.4   C6.1,6.8,5.8,7,5.4,7H5c-2.2,0-4,1.8-4,4v6c0,2.2,1.8,4,4,4h14c2.2,0,4-1.8,4-4v-6C23,8.8,21.2,7,19,7z M12,17c-2.2,0-4-1.8-4-4   c0-2.2,1.8-4,4-4s4,1.8,4,4C16,15.2,14.2,17,12,17z\" id=\"photo\"/></g></svg>';\n        let captureButton: HTMLAnchorElement = document.createElement(\"a\");\n        captureButton.innerHTML = svgIconCapture;\n\n        menuDivTag.appendChild(captureButton);\n\n        return menuDivTag;\n    }\n\n    static listCameraAndMicrophones() {\n        let inputs: any = {};\n        //This function will return the number of founded cameras and microphones on user's device.\n        navigator.mediaDevices.enumerateDevices()\n            .then(function (devices: any) {\n                devices.forEach(function (device: any) {\n                    // inputs[device.kind][deviceCounter]['id'] =   device.deviceId;\n                    //inputs[device.kind][deviceCounter]['label'] =   device.label;\n                    if (!inputs[device.kind]) {\n                        /*\n                         * //Initialize the array for, otherwise the .push will returns\n                         * \"Error: Cannot read property 'push' of undefined in [null].\"\n                         **/\n                        inputs[device.kind] = [];\n                    }\n                    inputs[device.kind].push({label: device.label, deviceId: device.deviceId});\n                });\n\n                //List of video inputs are accessible in return: inputs['videoinput']\n                return inputs;\n\n            }).catch(function (err: any) {\n            if (err.length) {\n                utils.log(err.name + \": \" + err.message, \"warn\");\n            }\n            return false;\n        });\n    }\n}","import {preferences} from \"../preferences\";\n\nexport class utils {\n    static log(message: string, type: string): void {\n        message = 'Camera.js: ' + message;\n        if (preferences.debug) {\n            switch (type) {\n                case 'warn':\n                    console.warn(message);\n                    break;\n                case 'info':\n                    console.info(message);\n                    break;\n                default:\n                    console.log(message);\n            }\n        }\n    }\n\n    static isHttps() {\n        return 'https:' == document.location.protocol;\n    }\n\n    /**\n     * http://stackoverflow.com/questions/5717093\n     * @param url\n     * @returns {boolean}\n     */\n    static validUrl(url: string) {\n        let regexp: RegExp = /(ftp|http|https):\\/\\/(\\w+:?\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@\\-\\/]))?/;\n        return regexp.test(url);\n    }\n}","export class preferences{\n    static isHttps:boolean = false;\n    static isMobile:boolean = false;\n    static debug:boolean = true;\n    static browserCameraSupport:boolean = false;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}